/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : EncoderRefrenztimer.h
**     Project     : ProcessorExpert
**     Processor   : MKL25Z128VLK4
**     Component   : TimerUnit_LDD
**     Version     : Component 01.137, Driver 01.08, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2013-03-15, 11:32, # CodeGen: 11
**     Abstract    :
**          This TimerUnit component provides a low level API for unified hardware access across
**          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
**     Settings    :
**          Component name                                 : EncoderRefrenztimer
**          Module name                                    : TPM0
**          Counter                                        : TPM0_CNT
**          Counter direction                              : Up
**          Counter width                                  : 16 bits
**          Value type                                     : Optimal
**          Input clock source                             : Internal
**            Counter frequency                            : 163.84 kHz
**          Counter restart                                : On-overrun
**            Overrun period                               : Auto select
**            Interrupt                                    : Enabled
**              Interrupt                                  : INT_TPM0
**              Interrupt priority                         : medium priority
**          Channel list                                   : 0
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : yes
**            Event mask                                   : 
**              OnCounterRestart                           : Enabled
**              OnChannel0                                 : Disabled
**              OnChannel1                                 : Disabled
**              OnChannel2                                 : Disabled
**              OnChannel3                                 : Disabled
**              OnChannel4                                 : Disabled
**              OnChannel5                                 : Disabled
**              OnChannel6                                 : Disabled
**              OnChannel7                                 : Disabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**     Contents    :
**         Init            - LDD_TDeviceData* EncoderRefrenztimer_Init(LDD_TUserData *UserDataPtr);
**         Deinit          - void EncoderRefrenztimer_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         GetCounterValue - EncoderRefrenztimer_TValueType EncoderR...
**
**     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __EncoderRefrenztimer_H
#define __EncoderRefrenztimer_H

/* MODULE EncoderRefrenztimer. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */

#include "PE_LDD.h"
#include "TPM_PDD.h"
#include "Cpu.h"


#ifndef __BWUserType_EncoderRefrenztimer_TValueType
#define __BWUserType_EncoderRefrenztimer_TValueType
  typedef uint32_t EncoderRefrenztimer_TValueType ; /* Type for data parameters of methods */
#endif
#define EncoderRefrenztimer_CNT_INP_FREQ_U_0 0x00028000UL /* Counter input frequency in Hz */
#define EncoderRefrenztimer_CNT_INP_FREQ_R_0 163839.98993367102F /* Counter input frequency in Hz */
#define EncoderRefrenztimer_CNT_INP_FREQ_COUNT 0U /* Count of predefined counter input frequencies */
#define EncoderRefrenztimer_NUMBER_OF_CHANNELS 0x00U /* Count of predefined channels */
#define EncoderRefrenztimer_COUNTER_WIDTH 0x10U /* Counter width in bits  */
#define EncoderRefrenztimer_COUNTER_DIR DIR_UP /* Direction of counting */
/* Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define EncoderRefrenztimer_PRPH_BASE_ADDRESS  0x40038000U
  
/* Device data structure pointer used when auto initialization property is enabled. This constant can be passed as a first parameter to all component's methods. */
#define EncoderRefrenztimer_DeviceData  ((LDD_TDeviceData *)PE_LDD_GetDeviceStructure(PE_LDD_COMPONENT_EncoderRefrenztimer_ID))

/* Methods configuration constants - generated for all enabled component's methods */
#define EncoderRefrenztimer_Init_METHOD_ENABLED
#define EncoderRefrenztimer_Deinit_METHOD_ENABLED
#define EncoderRefrenztimer_GetCounterValue_METHOD_ENABLED

/* Events configuration constants - generated for all enabled component's events */
#define EncoderRefrenztimer_OnCounterRestart_EVENT_ENABLED



LDD_TDeviceData* EncoderRefrenztimer_Init(LDD_TUserData *UserDataPtr);
/*
** ===================================================================
**     Method      :  EncoderRefrenztimer_Init (component TimerUnit_LDD)
**
**     Description :
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc. If the
**         property <"Enable in init. code"> is set to "yes" value then
**         the device is also enabled (see the description of the
**         <Enable> method). In this case the <Enable> method is not
**         necessary and needn't to be generated. This method can be
**         called only once. Before the second call of Init the <Deinit>
**         must be called first.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     Returns     :
**         ---             - Pointer to the dynamically allocated
**                           private structure or NULL if there was an
**                           error.
** ===================================================================
*/

void EncoderRefrenztimer_Deinit(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  EncoderRefrenztimer_Deinit (component TimerUnit_LDD)
**
**     Description :
**         Deinitializes the device. Switches off the device, frees the
**         device data structure memory, interrupts vectors, etc.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by Init method
**     Returns     : Nothing
** ===================================================================
*/

EncoderRefrenztimer_TValueType EncoderRefrenztimer_GetCounterValue(LDD_TDeviceData *DeviceDataPtr);
/*
** ===================================================================
**     Method      :  EncoderRefrenztimer_GetCounterValue (component TimerUnit_LDD)
**
**     Description :
**         Returns the content of counter register. This method can be
**         used both if counter is enabled and if counter is disabled.
**         The method is not available if HW doesn't allow reading of
**         the counter.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     Returns     :
**         ---             - Counter value (number of counted ticks).
** ===================================================================
*/

/* {Default RTOS Adapter} ISR function prototype */
PE_ISR(EncoderRefrenztimer_Interrupt);
/*
** ===================================================================
**     Method      :  EncoderRefrenztimer_Interrupt (component TimerUnit_LDD)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

/* END EncoderRefrenztimer. */

#endif
/* ifndef __EncoderRefrenztimer_H */
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.0 [05.03]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
