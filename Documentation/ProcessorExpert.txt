=============================================================================
List of generated methods in project: ProcessorExpert

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "I2cSlave"  (component I2C_LDD)
   - I2cSlave_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.    This method can be called only once. Before the second 
                call of Init() the Deinit() must be called first.
   - I2cSlave_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - I2cSlave_Enable -Enables I2C component. Events may be generated ("DisableEvent"/"EnableEvent").
   - I2cSlave_SlaveSendBlock -This method writes a block of characters to the I2C bus after the master starts the communication.
                If no character is ready for a transmission (user's output slave buffer is empty or method SlaveSendBlock is 
                not call), the "Empty character" will be sent (see "Empty character" property). In SLAVE mode the data are not 
                copied to an internal buffer and remains in the original location. Therefore the content of the buffer should 
                not be changed until the transmission is complete. If the method returns ERR_OK, it doesn't mean that 
                transmission was successful. The state of transmission is detectable by means of events (OnSlaveBlockSent or 
                OnError). This method is available only for the SLAVE or MASTER - SLAVE mode.
   - I2cSlave_SlaveReceiveBlock -This method receives a block of characters of the I2C bus after the master starts the 
                communication. In SLAVE mode the data are not copied to an internal buffer and remains in the original location.
                Therefore the content of the buffer should not be changed until the transmission is complete. If the method 
                returns ERR_OK, it doesn't mean that transmission was successful. The state of transmission is detectable by 
                means of events (OnSlaveBlockReceived or OnError). State LDD_I2C_SLAVE_TX_UNDERRUN of method GetError is return,
                when no character is ready for a reception  (user's input slave buffer is empty). This method is available only 
                for the SLAVE or MASTER - SLAVE mode.
   - I2cSlave_GetError -Returns value of error mask, e.g. LDD_I2C_ARBIT_LOST.

Module "EncoderRefrenztimer" (component TimerUnit_LDD)
   - EncoderRefrenztimer_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt 
                vectors and sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. 
                code"> is set to "yes" value then the device is also enabled (see the description of the <Enable> method). In 
                this case the <Enable> method is not necessary and needn't to be generated. This method can be called only once.
                Before the second call of Init the <Deinit> must be called first.
   - EncoderRefrenztimer_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, 
                interrupts vectors, etc.
   - EncoderRefrenztimer_GetCounterValue -Returns the content of counter register. This method can be used both if counter is 
                enabled and if counter is disabled. The method is not available if HW doesn't allow reading of the counter.

Module "EncoderMotorA" (component ExtInt)
   - EncoderMotorA_Enable -Enable the component - the external events are accepted. This method is available only if HW module 
                allows enable/disable of the interrupt.
   - EncoderMotorA_Disable -Disable the component - the external events are not accepted. This method is available only if HW 
                module allows enable/disable of the interrupt.
   - EncoderMotorA_GetVal -Returns the actual value of the input pin of the component.

Module "EncoderMotorB" (component ExtInt)
   - EncoderMotorB_Enable -Enable the component - the external events are accepted. This method is available only if HW module 
                allows enable/disable of the interrupt.
   - EncoderMotorB_Disable -Disable the component - the external events are not accepted. This method is available only if HW 
                module allows enable/disable of the interrupt.
   - EncoderMotorB_GetVal -Returns the actual value of the input pin of the component.

Module "MotortreiberIN1_IN4" (component BitsIO)
   - MotortreiberIN1_IN4_GetDir -Return selected direction.
   - MotortreiberIN1_IN4_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the 
                input value of the pins and returns it. If the direction is [output] then returns the last written value (see 
                <Safe mode> property for limitations).
   - MotortreiberIN1_IN4_PutVal -Specified value is passed to the Input/Output component. If the direction is [input] saves the 
                value to a memory or a register, this value will be written to the pins after switching to the output mode - 
                using [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the 
                value to the pins. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - MotortreiberIN1_IN4_GetBit -Returns the value of the specified bit/pin of the Input/Output component. If the direction is 
                [input] then it reads the input value of the pin and returns it. If the direction is [output] then it returns 
                the last written value (see <Safe mode> property for limitations).
   - MotortreiberIN1_IN4_PutBit -Specified value is passed to the specified bit/pin of the Input/Output component. If the 
                direction is [input] it saves the value to a memory or register, this value will be written to the pin after 
                switching to the output mode - using [SetDir(TRUE)] (see <Safe mode> property for limitations). If the 
                direction is [output] it writes the value to the pin. (Method is available only if the Direction = _[output]_ 
                or _[input/output]_).
   - MotortreiberIN1_IN4_SetBit -Sets (to one) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, 
                TRUE)]. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - MotortreiberIN1_IN4_ClrBit -Clears (sets to zero) the specified bit of the Input/Output component. It is the same as 
                [PutBit(Bit, FALSE)]. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - MotortreiberIN1_IN4_NegBit -Negates (inverts) the specified bit of the Input/Output component. It is the same as 
                [PutBit(Bit,!GetBit(Bit))]. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "US_Triger" (component BitsIO)
   - US_Triger_GetDir -Return selected direction.
   - US_Triger_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value 
                of the pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> 
                property for limitations).
   - US_Triger_PutVal -Specified value is passed to the Input/Output component. If the direction is [input] saves the value to 
                a memory or a register, this value will be written to the pins after switching to the output mode - using 
                [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the value to 
                the pins. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - US_Triger_GetBit -Returns the value of the specified bit/pin of the Input/Output component. If the direction is [input] 
                then it reads the input value of the pin and returns it. If the direction is [output] then it returns the last 
                written value (see <Safe mode> property for limitations).
   - US_Triger_PutBit -Specified value is passed to the specified bit/pin of the Input/Output component. If the direction is 
                [input] it saves the value to a memory or register, this value will be written to the pin after switching to 
                the output mode - using [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] 
                it writes the value to the pin. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - US_Triger_SetBit -Sets (to one) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, TRUE)]. 
                (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - US_Triger_ClrBit -Clears (sets to zero) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, 
                FALSE)]. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - US_Triger_NegBit -Negates (inverts) the specified bit of the Input/Output component. It is the same as [PutBit(Bit,!
                GetBit(Bit))]. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "Lichtschranke" (component BitIO)
   - Lichtschranke_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].

Module "LED1_4"    (component BitsIO)
   - LED1_4_GetDir -Return selected direction.
   - LED1_4_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input value of 
                the pins and returns it. If the direction is [output] then returns the last written value (see <Safe mode> 
                property for limitations).
   - LED1_4_PutVal -Specified value is passed to the Input/Output component. If the direction is [input] saves the value to a 
                memory or a register, this value will be written to the pins after switching to the output mode - using 
                [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the value to 
                the pins. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - LED1_4_GetBit -Returns the value of the specified bit/pin of the Input/Output component. If the direction is [input] then 
                it reads the input value of the pin and returns it. If the direction is [output] then it returns the last 
                written value (see <Safe mode> property for limitations).
   - LED1_4_PutBit -Specified value is passed to the specified bit/pin of the Input/Output component. If the direction is 
                [input] it saves the value to a memory or register, this value will be written to the pin after switching to 
                the output mode - using [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] 
                it writes the value to the pin. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - LED1_4_SetBit -Sets (to one) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, TRUE)]. 
                (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - LED1_4_ClrBit -Clears (sets to zero) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, FALSE)
                ]. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - LED1_4_NegBit -Negates (inverts) the specified bit of the Input/Output component. It is the same as [PutBit(Bit,!
                GetBit(Bit))]. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "IO_Res_Lueft" (component BitsIO)
   - IO_Res_Lueft_GetDir -Return selected direction.
   - IO_Res_Lueft_SetDir -Sets a direction for the pins (available only if Direction = _[input/output]_).
   - IO_Res_Lueft_GetVal -Returns the value of the Input/Output component. If the direction is [input] then reads the input 
                value of the pins and returns it. If the direction is [output] then returns the last written value (see <Safe 
                mode> property for limitations).
   - IO_Res_Lueft_PutVal -Specified value is passed to the Input/Output component. If the direction is [input] saves the value 
                to a memory or a register, this value will be written to the pins after switching to the output mode - using 
                [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] it writes the value to 
                the pins. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - IO_Res_Lueft_GetBit -Returns the value of the specified bit/pin of the Input/Output component. If the direction is [input] 
                then it reads the input value of the pin and returns it. If the direction is [output] then it returns the last 
                written value (see <Safe mode> property for limitations).
   - IO_Res_Lueft_PutBit -Specified value is passed to the specified bit/pin of the Input/Output component. If the direction is 
                [input] it saves the value to a memory or register, this value will be written to the pin after switching to 
                the output mode - using [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] 
                it writes the value to the pin. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - IO_Res_Lueft_SetBit -Sets (to one) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, TRUE)]. 
                (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - IO_Res_Lueft_ClrBit -Clears (sets to zero) the specified bit of the Input/Output component. It is the same as [PutBit(Bit, 
                FALSE)]. (Method is available only if the Direction = _[output]_ or _[input/output]_).
   - IO_Res_Lueft_NegBit -Negates (inverts) the specified bit of the Input/Output component. It is the same as [PutBit(Bit,!
                GetBit(Bit))]. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "RegelungReferenztimer" (component TimerUnit_LDD)
   - RegelungReferenztimer_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt 
                vectors and sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. 
                code"> is set to "yes" value then the device is also enabled (see the description of the <Enable> method). In 
                this case the <Enable> method is not necessary and needn't to be generated. This method can be called only once.
                Before the second call of Init the <Deinit> must be called first.
   - RegelungReferenztimer_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, 
                interrupts vectors, etc.

Module "US_Referenztimer" (component TimerUnit_LDD)
   - US_Referenztimer_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors 
                and sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is 
                set to "yes" value then the device is also enabled (see the description of the <Enable> method). In this case 
                the <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before 
                the second call of Init the <Deinit> must be called first.
   - US_Referenztimer_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, 
                interrupts vectors, etc.
   - US_Referenztimer_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting 
                down then counter is updated to the reload value.   The method is not available if HW doesn't allow resetting 
                of the counter.
   - US_Referenztimer_GetCounterValue -Returns the content of counter register. This method can be used both if counter is 
                enabled and if counter is disabled. The method is not available if HW doesn't allow reading of the counter.

Module "I2C_Kompass" (component I2C_LDD)
   - I2C_Kompass_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.    This method can be called only once. Before the second 
                call of Init() the Deinit() must be called first.
   - I2C_Kompass_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - I2C_Kompass_MasterSendBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The slave address 
                must be specified before, by the "SelectSlaveDevice" method or in component initialization section, "Target 
                slave address init" property. If the method returns ERR_OK, it doesn't mean that transmission was successful. 
                The state of transmission is detectable by means of events (OnMasterSendComplete or OnError). Data to be sent 
                are not copied to an internal buffer and remains in the original location. Therefore the content of the buffer 
                should not be changed until the transmission is complete. Event "OnMasterBlockSent"can be used to detect the 
                end of the transmission. This method is available only for the MASTER or MASTER - SLAVE mode.
   - I2C_Kompass_MasterReceiveBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 1 to the I2C bus and then receives the block of characters from the bus. The slave 
                address must be specified before, by the "SelectSlaveDevice" method or in component initialization section, 
                "Target slave address init" property. If the method returns ERR_OK, it doesn't mean that reception was 
                successful. The state of reception is detectable by means of events (OnMasterSendComplete  or OnError). Data to 
                be received are not copied to an internal buffer and remains in the original location. Therefore the content of 
                the buffer should not be changed until the transmission is complete. Event "OnMasterBlockReceived"can be used 
                to detect the end of the reception. This method is available only for the MASTER or MASTER - SLAVE mode.
   - I2C_Kompass_SelectSlaveDevice -This method selects a new slave for communication by its 7-bit slave, 10-bit address or 
                general call value. Any send or receive method directs to or from selected device, until a new slave device is 
                selected by this method. This method is available for the MASTER mode.
   - I2C_Kompass_GetError -Returns value of error mask, e.g. LDD_I2C_ARBIT_LOST.

Module "US_FrontListener" (component ExtInt)
   - US_FrontListener_Enable -Enable the component - the external events are accepted. This method is available only if HW 
                module allows enable/disable of the interrupt.
   - US_FrontListener_Disable -Disable the component - the external events are not accepted. This method is available only if 
                HW module allows enable/disable of the interrupt.
   - US_FrontListener_GetVal -Returns the actual value of the input pin of the component.

Module "US_HeckListener" (component ExtInt)
   - US_HeckListener_Enable -Enable the component - the external events are accepted. This method is available only if HW 
                module allows enable/disable of the interrupt.
   - US_HeckListener_Disable -Disable the component - the external events are not accepted. This method is available only if HW 
                module allows enable/disable of the interrupt.
   - US_HeckListener_GetVal -Returns the actual value of the input pin of the component.

Module "US_Rechts_FrontListener" (component ExtInt)
   - US_Rechts_FrontListener_Enable -Enable the component - the external events are accepted. This method is available only if 
                HW module allows enable/disable of the interrupt.
   - US_Rechts_FrontListener_Disable -Disable the component - the external events are not accepted. This method is available 
                only if HW module allows enable/disable of the interrupt.
   - US_Rechts_FrontListener_GetVal -Returns the actual value of the input pin of the component.

Module "US_Rechts_HeckListener" (component ExtInt)
   - US_Rechts_HeckListener_Enable -Enable the component - the external events are accepted. This method is available only if 
                HW module allows enable/disable of the interrupt.
   - US_Rechts_HeckListener_Disable -Disable the component - the external events are not accepted. This method is available 
                only if HW module allows enable/disable of the interrupt.
   - US_Rechts_HeckListener_GetVal -Returns the actual value of the input pin of the component.

Module "US_DachListener" (component ExtInt)
   - US_DachListener_Enable -Enable the component - the external events are accepted. This method is available only if HW 
                module allows enable/disable of the interrupt.
   - US_DachListener_Disable -Disable the component - the external events are not accepted. This method is available only if HW 
                module allows enable/disable of the interrupt.
   - US_DachListener_GetVal -Returns the actual value of the input pin of the component.

Module "US_DachTrigger" (component BitIO)
   - US_DachTrigger_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - US_DachTrigger_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - US_DachTrigger_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - US_DachTrigger_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "Start"     (component ExtInt)
   - Start_GetVal -Returns the actual value of the input pin of the component.

Module "Stop"      (component ExtInt)
   - Stop_GetVal -Returns the actual value of the input pin of the component.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts vectors, 
                etc.
   - TU1_GetPeriodTicks -Returns the number of counter ticks before re-initialization. See also method <SetPeriodTicks>. This 
                method is available only if the property <"Counter restart"> is switched to 'on-match' value.
   - TU1_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TU1_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user responsibility 
                to use value below selected period. This method is available when at least one channel is configured.
   - TU1_GetOffsetTicks -Returns the number of counter ticks to compare match channel specified by the parameter ChannelIdx. 
                See also method <SetOffsetTicks>. This method is available when at least one channel is configured.
   - TU1_SelectOutputAction -Sets the type of compare match and counter overflow action on channel output. This method is 
                available when at least one channel is configured.

Module "MotorA_PWM" (component PWM)
   - MotorA_PWM_SetRatio8 -This method sets a new duty-cycle ratio. Ratio is expressed as an 8-bit unsigned integer number. 0 - 
                FF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer capabilities 
                and on the selected period.
   - MotorA_PWM_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 
                - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - MotorA_PWM_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - MotorA_PWM_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "MotorB_PWM" (component PWM)
   - MotorB_PWM_SetRatio8 -This method sets a new duty-cycle ratio. Ratio is expressed as an 8-bit unsigned integer number. 0 - 
                FF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer capabilities 
                and on the selected period.
   - MotorB_PWM_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 
                - FFFF value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of 
                predefined values in <Starting pulse width> property.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.
   - MotorB_PWM_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - MotorB_PWM_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "Cpu"       (component MKL25Z128LK4)

===================================================================================
